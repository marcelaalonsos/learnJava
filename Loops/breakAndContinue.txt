Break and continue

if we ever wanted to exit a loop before it finishes all its iterations or skip one of the iterations, we can use the break and continue keywords.

The break keyword is used to exit, or break, a loop. Once break is executed, the loop will stop:
for (int i = 0; i < 10; i++) {
  System.out.println(i);
  if (i == 4) {
    break;
  }
}

Even though the loop was set to iterate until the condition i < 10 is false, the code will output:
0
1
2
3
4

The continue keyword can be placed inside of a loop if we want to skip an iteration.
If continue is executed, the current loop iteration will immediately end, and the next iteration will begin:

int[] numbers = {1, 2, 3, 4, 5};

for (int i = 0; i < numbers.length; i++) {
  if (numbers[i] % 2 == 0) {
    continue;
  }
  System.out.println(numbers[i]);
}

the output:
1
3
5

*Loops can exist all throughout our code - including inside a method.
If the return keyword was executed inside a loop contained in a method, then the loop iteration would be stopped and the method/constructor would be exited.

i.e. We have a method called checkForJacket() that takes in an array of string.
If any of the elements are equivalent to the string value "jacket", the method will return true.
public static boolean checkForJacket(String[] lst) {
  for (int i = 0; i < lst.length; i++) {
    System.out.println(lst[i]);
    if (lst[i] == "jacket") {
      return true;
    }
  }
  return false;
}

public static void main(String[] args) {
  String[] suitcase = {"shirt", "jacket", "pants", "socks"};
  System.out.println(checkForJacket(suitcase));
}

As soon as an element equals "jacket", return true; is executed. This causes the loop to stop and the compiler to exit checkForJacket(). Running this code would output the following:

shirt
jacket
true
