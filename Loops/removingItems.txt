Removing Elements During Traversal

If we want to remove elements from an ArrayList while traversing through one, we can easily run into an error.
When an element is removed from an ArrayList, all the items that appear after the removed element will have their index value shift by negative one - it's like all elements shifted to the left.

Removing An Element Using while

When using a while loop and removing elements from an ArrayList, we should not increment the while loop's counter whenever we remove an element. We don't need to increase the counter because all the other elements have now shifted to the left.

For example, if we removed the element at index 3, then the element that was at index 4 will be moved to index 3.
If we increase our counter to 4, we'll skip that element.

Take a look at this block of code that will removed all odd numbers from an ArrayList.
Think about what the value of i is, when we're increasing the value of i, and when i < lst.size() becomes false:
int i = 0; // initialize counter

while (i < lst.size()) {
  // if value is odd, remove value
  if (lst.get(i) % 2 != 0){
    lst.remove(i);
  } else {
    // if value is even, increment counter
    i++;
  }
}

Removing an Element Using For

We can use a similar strategy when removing elements using a for loop.
When using a while loop, we decided not to increase our loop control variable whenever we removed an item.
This ensured that we would not skip an element when all of the other elements shifted to the left.

When using a for loop, we must increase our loop control variable - the loop control variable will always change when we reach the end of the loop (and it will usually change by 1 because we often use something like i++).
Since we can't avoid increasing our loop control variable, we can take matters into our own hands and decrease the loop control variable whenever we remove an item.
for (int i = 0; i < lst.size(); i++) {
  if (lst.get(i) == "value to remove"){
    // remove value from ArrayList
    lst.remove(lst.get(i));
    // Decrease loop control variable by 1
    i--;
  }
}

NOTE: avoid manipulating the size of an ArrayList when using an enhanced for loop.
Actions like adding or removing elements from an ArrayList when using a for each loop can cause a ConcurrentModificationException error.
